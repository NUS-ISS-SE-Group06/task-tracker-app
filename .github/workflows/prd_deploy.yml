name: prd_deploy
on:
  push:
    branches:
      - dev
    paths-ignore:
      - '.github/**'
      - 'public/**'
      - 'README.md' 
      - 'sonar-project.properties'
  workflow_dispatch:   
permissions:
  contents: read
  pages: write
  id-token: write
concurrency:
  group: "pages"
  cancel-in-progress: false
  
jobs:
  test_build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [21.x]     
    steps:
      - name: Checkout Source Codes
        uses: actions/checkout@v4
        with: 
          ref: main

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - run: npm ci

      - run: npm run build --if-present

      - run: CI=true npm test

  code_scan:
    needs: test_build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Source Codes
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Analyze on SonarCloud
        uses: sonarsource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}     

  uat_deploy:
    needs: code_scan
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Source Codes
        uses: actions/checkout@v4
        with: 
          ref: main

      - name: Use Node.js 21.x
        uses: actions/setup-node@v4
        with:
          node-version: '21.x'
          cache: 'npm'

      - run: npm ci

      - run: npm run build --if-present

      - name: List Contents of build Directory
        run: ls -R build  

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:  
          path: build

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  build_docker_image:
    needs: test_build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Source Codes
        uses: actions/checkout@v4
        with:
          ref: main

        - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

        - name: Build and push Docker image
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          # Log in to Docker Hub using the username and password stored in GitHub Secrets
          echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
          
          # Build and push the Docker image for multiple platforms (e.g., amd64 and arm64)
          docker buildx build --platform linux/amd64,linux/arm64 -t $DOCKER_USERNAME/task-tracker-app-prd:latest --push .


      # - name: Build Docker image
      #   run: docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/task-tracker:latest .
      # - name: Login to Docker Hub
      #   run: docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_ACCESS_TOKEN }}
      # - name: Push Docker image to Docker Hub
      #   run: docker push  ${{ secrets.DOCKER_HUB_USERNAME }}/task-tracker:latest

  # deploy_to_digitalocean:
  #   needs: build_docker_image
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Deploy to DigitalOcean
  #       env:
  #         DIGITALOCEAN_SSH_PRIVATE_KEY: ${{ secrets.DIGITALOCEAN_SSH_PRIVATE_KEY }}
  #         DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
  #         CONTAINER_NAME: "task-tracker" # Change this to your container name
  #       run: |
  #         mkdir -p ~/.ssh
  #         echo "$DIGITALOCEAN_SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
  #         chmod 600 ~/.ssh/id_rsa
  #         ssh-keyscan -t rsa 165.22.100.234 >> ~/.ssh/known_hosts
          
  #         # Stop the container if it is running
  #         ssh -o StrictHostKeyChecking=no root@165.22.100.234 "docker stop $CONTAINER_NAME || true"
          
  #         # Remove the container if it exists
  #         ssh -o StrictHostKeyChecking=no root@165.22.100.234 "docker rm -f $CONTAINER_NAME || true"
          
  #         # Remove the image if it exists
  #         ssh -o StrictHostKeyChecking=no root@165.22.100.234 "docker rmi -f $DOCKER_HUB_USERNAME/task-tracker:latest || true"

  #         # Pull the latest image from Docker Hub
  #         docker pull $DOCKER_HUB_USERNAME/task-tracker:latest 
          
  #         # Run the container
  #         ssh -o StrictHostKeyChecking=no root@165.22.100.234 "docker run -d --name $CONTAINER_NAME -p 3000:3000 $DOCKER_HUB_USERNAME/task-tracker:latest"

  # deploy_to_digitalocean_dr:
  #   needs: build_docker_image
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Deploy to DigitalOcean
  #       env:
  #         DIGITALOCEAN_SSH_PRIVATE_KEY: ${{ secrets.DIGITALOCEAN_DR_SSH_PRIVATE_KEY }}
  #         DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
  #         CONTAINER_NAME: "task-tracker" # Change this to your container name
  #       run: |
  #         mkdir -p ~/.ssh
  #         echo "$DIGITALOCEAN_SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
  #         chmod 600 ~/.ssh/id_rsa
  #         ssh-keyscan -t rsa 128.199.134.155 >> ~/.ssh/known_hosts
                  
  #         # Stop the container if it is running
  #         ssh -o StrictHostKeyChecking=no root@128.199.134.155 "docker stop $CONTAINER_NAME || true"
                  
  #         # Remove the container if it exists
  #         ssh -o StrictHostKeyChecking=no root@128.199.134.155 "docker rm -f $CONTAINER_NAME || true"
                  
  #         # Remove the image if it exists
  #         ssh -o StrictHostKeyChecking=no root@128.199.134.155 "docker rmi -f $DOCKER_HUB_USERNAME/task-tracker:latest || true"
        
  #         # Pull the latest image from Docker Hub
  #         docker pull $DOCKER_HUB_USERNAME/task-tracker:latest 
                  
  #         # Run the container
  #         ssh -o StrictHostKeyChecking=no root@128.199.134.155 "docker run -d --name $CONTAINER_NAME -p 3000:3000 $DOCKER_HUB_USERNAME/task-tracker:latest"
        
        