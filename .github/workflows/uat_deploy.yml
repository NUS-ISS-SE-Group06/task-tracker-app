name: uat_deploy
on:
  # trigger for CI
  workflow_dispatch:
  # This workflow is automatically triggered upon a push request to the development branch. 
  # The test-build : indicating whether your code commits are not breaking during compilation.
  # The unit-test : indicating whether your functionalities are not breaking.
  # The Sonar : indicating whether your code commits are not violating code scan rules.
  ##
  #push:
  #  branches:
  #    - mainx
  #  paths-ignore:
  #    - '.github/**'
  #    - 'public/**'
  #    - 'README.md' 
  #    - 'sonar-project.properties' 
permissions:
  contents: read
  pages: write
  id-token: write
concurrency:
  group: "pages"
  cancel-in-progress: false
  
jobs:
  test_build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [21.x]     
    steps:
      - name: Checkout Source Codes
        uses: actions/checkout@v4
        with: 
          ref: dev
          
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          
      - run: npm ci
      
      - run: npm run build --if-present
      
      - run: CI=true npm test

  code_scan:
    needs: test_build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Source Codes
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Analyze on SonarCloud
        uses: sonarsource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}     

  

  build_docker_image:
    if: github.ref == 'refs/heads/main'
    needs: code_scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Source Codes
        uses: actions/checkout@v4
        with:
          ref: main
          
      - name: Build Docker image
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/task-tracker-app-uat:${{ github.sha }} .
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker push  ${{ secrets.DOCKER_USERNAME }}/task-tracker-app-uat:${{ github.sha }}
    

    # Install doctl (DigitalOcean CLI)  
  digital_ocean_deployment:
    needs: build_docker_image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Source Codes
        uses: actions/checkout@v4
        with:
          ref: main
          
      - name: Install DigitalOcean CLI
        run: |
           curl -sL https://github.com/digitalocean/doctl/releases/download/v1.83.0/doctl-1.83.0-linux-amd64.tar.gz | tar -xzv
           sudo mv doctl /usr/local/bin

    # Authenticate doctl with DigitalOcean API token
      - name: Authenticate with DigitalOcean
        run: doctl auth init -t ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

     # Create .kube directory manually
      - name: Create kube directory
        run: mkdir -p /home/runner/.kube

    # Get Kubernetes configuration from DigitalOcean
      - name: Retrieve Kubernetes credentials
        run: doctl kubernetes cluster kubeconfig save 77c86425-2a82-4012-beda-18a1a12979ae

    # Deploy the updated Kubernetes resources
      - name: Apply Kubernetes manifests
        run: |
          sed -i "s|image: $DOCKER_USERNAME/task-tracker-app-uat:.*|image: $DOCKER_USERNAME/task-tracker-app-uat:${{ github.sha }}|" deployment-uat.yaml
          kubectl apply -f deployment-uat.yaml
          kubectl apply -f service-uat.yaml
